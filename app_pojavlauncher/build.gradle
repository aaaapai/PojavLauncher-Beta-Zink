plugins {
    id 'com.android.application' version '8.9.0-alpha06'
}

static def getDate() { return new Date().format('yyyyMMdd') }

static def getDateSeconds() {
    return 9999999
}

def getVersionName = {
    // Get the last version tag, as well as the short head of the last commit
    ByteArrayOutputStream TAG = new ByteArrayOutputStream()
    ByteArrayOutputStream BRANCH = new ByteArrayOutputStream()
    // Used by the fallback for github actions
    ByteArrayOutputStream TAG_PART_COMMIT = new ByteArrayOutputStream()
    String TAG_STRING

    exec {
        try {
            commandLine 'git', 'describe', '--tags'
            ignoreExitValue true
            standardOutput = TAG
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    if (TAG.toString() == "") {
        exec {
            // Fallback for action builds
            try {
                commandLine 'git', 'describe', '--always', '--tags'
                ignoreExitValue true
                standardOutput = TAG_PART_COMMIT
            } catch (Exception e) {
            }
        }
    }


    if (TAG.toString() != "") {
        TAG_STRING = TAG.toString()
    } else {
        if (TAG_PART_COMMIT.toString().trim() == "") {
            //Fallback no repo
            return ("fuchsia-" + "${getDate()}")
        } else {
            // Used by github actions
            TAG_STRING =  'fuchsia-' + "${getDate()}" + "-" + TAG_PART_COMMIT.toString().trim()
        }
    }

    exec {
        try {
            commandLine 'git', 'branch', '--show-current'
            ignoreExitValue true
            standardOutput = BRANCH
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    return TAG_STRING.trim().replace("-g", "-") + "-" + BRANCH.toString().trim()
}

def getBaseVersionCode = {
    def isofficial = System.getenv('IS_OFFICIAL') == 'true'
    def baseVersionCode = 100000000
    if (isofficial) {
        return (baseVersionCode + Integer.parseInt(System.getenv("GITHUB_RUN_NUMBER"))).toString()
    } else {
        def baseVersionCodeFile = new File("./base_version_code.txt")
        if (baseVersionCodeFile.canRead() && baseVersionCodeFile.isFile()) {
            def fileContent = baseVersionCodeFile.text.trim()
            try {
                return Integer.parseInt(fileContent).toString()
            } catch (NumberFormatException e) {
                println("Invalid version code in base_version_code.txt: $fileContent")
                return baseVersionCode.toString()
            }
        }
    }
    return baseVersionCode.toString()
}

def getCFApiKey = {
    String key = System.getenv("CURSEFORGE_API_KEY");
    if(key != null) return key;
    File curseforgeKeyFile = new File("./curseforge_key.txt");
    if(curseforgeKeyFile.canRead() && curseforgeKeyFile.isFile()) {
        return curseforgeKeyFile.text;
    }
    logger.warn('BUILD: You have no CurseForge key, the curseforge api will get disabled !');
    return "DUMMY";
}

configurations {
    instrumentedClasspath {
        canBeConsumed = false
        canBeResolved = true
    }
}

android {
    namespace 'net.kdt.pojavlaunch'

    compileSdk = 35

    lintOptions {
        abortOnError false
    }

    signingConfigs {
        releaseBuild {
            def pwd = System.getenv("VERA_KEYSTORE_PASSWORD")
            storeFile file("key-store.jks")
            storePassword pwd
            keyAlias "Firefly"
            keyPassword pwd
        }
        customDebug {
            storeFile file("debug.keystore")
            storePassword "android"
            keyAlias "androiddebugkey"
            keyPassword "android"
        }
    }

    defaultConfig {
        applicationId "net.kdt.pojavlaunch.firefly"
        minSdkVersion 21
        targetSdkVersion 35
        versionCode getDateSeconds()
        versionName getVersionName()
        multiDexEnabled true //important
        resValue 'string', 'curseforge_api_key', getCFApiKey()
        resValue 'string', 'base_version_code', getBaseVersionCode()
    }

    buildTypes {
        debug {
            applicationIdSuffix '.debug'
            debuggable true
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.customDebug
            resValue 'string', 'application_package', 'net.kdt.pojavlaunch.firefly.debug'
            resValue 'string', 'storageProviderAuthorities', 'net.kdt.pojavlaunch.scoped.gamefolder.firefly.debug'
            resValue 'string', 'fileProviderAuthorities', 'net.kdt.pojavlaunch.scoped.FileFileProvider.debug'
        }
        release {
            debuggable false
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.releaseBuild
            resValue 'string', 'application_package', 'net.kdt.pojavlaunch.firefly'
            resValue 'string', 'storageProviderAuthorities', 'net.kdt.pojavlaunch.scoped.gamefolder.firefly'
            resValue 'string', 'fileProviderAuthorities', 'net.kdt.pojavlaunch.scoped.FileFileProvider'
        }
    }
    applicationVariants.configureEach { variant ->
        variant.outputs.configureEach { output ->
            def abi = output.getFilter(ABI)
            if (abi == null) {
            abi = "all"
        }
        variant.mergeAssetsProvider.get().doLast {
            def arch = System.getProperty("arch", "all")
            def assetsDir = mergeAssetsProvider.get().outputDir.get()
            def java = ['jre-8', 'jre-11', 'jre-17', 'jre-21']
            println(arch)
            java.forEach { String str ->
                def runtimeDir = new File([assetsDir, "components/" + str].join(File.separator))
                println(runtimeDir)
                def files = fileTree(dir: runtimeDir, include: ['*.tar.xz'])
                files.forEach { File file ->
                    if (arch != 'all' && !file.getName().contains(arch) && !file.getName().contains("universal")) {
                        print("delete:${file} :")
                        println(delete(file))
                    }
                }
            }
        }
        def beseVersionName = getDate().toString()
        def baseName = "Pojav-Glow-Worm-${variant.buildType.name == 'release' ? beseVersionName : "Debug-${beseVersionName}"}"
        outputFileName = "${baseName}-${abi}.apk"
        }
    }
    splits {
        def arch = System.getProperty("arch", "all")
        if (arch != 'all') {
            abi {
                enable true
                reset()
                switch (arch) {
                    case 'arm':
                        include 'armeabi-v7a'
                        break
                    case 'arm64':
                        include 'arm64-v8a'
                        break
                    case 'x86':
                        include 'x86'
                        break
                    case 'x86_64':
                        include 'x86_64'
                        break
                }
            }
        }
    }

    ndkVersion = "26.3.11579264"

    externalNativeBuild {
        ndkBuild {
            path file('src/main/jni/Android.mk')
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_21
        targetCompatibility JavaVersion.VERSION_21
    }

    bundle {
        language {
            enableSplit = false
        }
    }

    packagingOptions {
        jniLibs {
            useLegacyPackaging = true
        }
        pickFirst '**/libbytehook.so'
        exclude '**/awt_headless.so'
    }

    buildFeatures {
        prefab true
        buildConfig true
    }

    buildToolsVersion = '35.0.0'
}

dependencies {
    implementation 'jakarta.annotation:jakarta.annotation-api:3.0.0'
    implementation 'commons-codec:commons-codec:1.17.1'
    // implementation 'com.wu-man:android-bsf-api:3.1.3'
    implementation 'androidx.preference:preference:1.2.1'
    //implementation 'androidx.core:core:1.7.0'
    implementation 'androidx.drawerlayout:drawerlayout:1.2.0'
    implementation 'androidx.viewpager2:viewpager2:1.1.0'
    implementation 'androidx.annotation:annotation:1.9.1'
    implementation 'androidx.documentfile:documentfile:1.1.0-alpha01'

    implementation "androidx.constraintlayout:constraintlayout:2.2.0"

    implementation 'com.github.duanhong169:checkerboarddrawable:1.0.2'
    implementation 'com.github.PojavLauncherTeam:portrait-sdp:ed33e89cbc'
    implementation 'com.github.PojavLauncherTeam:portrait-ssp:6c02fd739b'
    implementation 'com.github.Mathias-Boulay:ExtendedView:1.0.0'
    implementation 'com.github.Mathias-Boulay:android_gamepad_remapper:2.0.3'
    implementation 'com.github.Mathias-Boulay:virtual-joystick-android:2e7aa25e50'
    implementation 'top.fifthlight.touchcontroller:proxy-client:0.0.1'


    // implementation 'com.intuit.sdp:sdp-android:1.0.5'
    // implementation 'com.intuit.ssp:ssp-android:1.0.5'

    implementation 'org.tukaani:xz:1.10'
    implementation 'net.sourceforge.htmlcleaner:htmlcleaner:2.6.1'

    // implementation 'net.sourceforge.streamsupport:streamsupport-cfuture:1.7.0'

    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation fileTree(dir: 'libs', include: ['*.aar'])
    
    implementation 'com.squareup.okhttp3:okhttp:5.0.0-alpha.14'
}
